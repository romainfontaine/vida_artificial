#include "GL/freeglut.h"
#include "GL/gl.h"
#include <cmath>
#include <vector>
#include <map>
#include <iostream>

struct Point
{
    double x, y, z;

    Point(double x, double y, double z) : x(x), y(y), z(z)
    {
    };
};

struct Color
{
    double r, g, b;

    Color(double r, double g, double b) : r(r), g(g), b(b)
    {
    };
};

#include "TurtleInterpreter.h"
#include "LSystem.h"
#include "Animal.h"
#include "Plant.h"


std::vector<Point> fish1{
    {-0.4375, -0.0692307692, 1},
    {-0.5, 0.1846153846, 1},
    {-0.375, 0.1461538462, 1},
    {-0.32421875, -0.0076923077, 1},
    {-0.19140625, 0.2384615385, 1},
    {-0.18359375, 0.4923076923, 1},
    {0.11328125, 0.5, 1},
    {0.234375, 0.3538461538, 1},
    {0.375, 0.1846153846, 1},
    {0.5, -0.0923076923, 1},
    {0.40625, -0.2769230769, 1},
    {0.27734375, -0.4153846154, 1},
    {0.140625, -0.4692307692, 1},
    {0.00390625, -0.4461538462, 1},
    {-0.0625, -0.4153846154, 1},
    {-0.1953125, -0.5, 1},
    {-0.1796875, -0.3538461538, 1},
    {-0.328125, -0.2076923077, 1},
    {-0.375, -0.3230769231, 1},
    {-0.49609375, -0.4, 1},
    {-0.4375, -0.1076923077, 1}
};

std::vector<Point> fish2{
    {-0.4981884058, 0.2106598985, 1},
    {-0.3713768116, 0.0837563452, 1},
    {-0.0489130435, 0.2664974619, 1},
    {-0.0307971014, 0.3527918782, 1},
    {-0.027173913, 0.4492385787, 1},
    {-0.0253623188, 0.5, 1},
    {0.0905797101, 0.3020304569, 1},
    {0.1956521739, 0.2868020305, 1},
    {0.2844202899, 0.2461928934, 1},
    {0.4130434783, 0.1294416244, 1},
    {0.4673913043, 0.0329949239, 1},
    {0.5, -0.0634517766, 1},
    {0.5, -0.1192893401, 1},
    {0.4710144928, -0.1954314721, 1},
    {0.4239130435, -0.2512690355, 1},
    {0.3731884058, -0.2969543147, 1},
    {0.2608695652, -0.3426395939, 1},
    {0.2355072464, -0.4898477157, 1},
    {0.2264492754, -0.5, 1},
    {0.2173913043, -0.5, 1},
    {0.2065217391, -0.4746192893, 1},
    {0.1884057971, -0.3934010152, 1},
    {0.1902173913, -0.3578680203, 1},
    {-0.009057971, -0.3274111675, 1},
    {-0.0307971014, -0.3730964467, 1},
    {-0.0579710145, -0.4137055838, 1},
    {-0.0778985507, -0.4137055838, 1},
    {-0.0815217391, -0.3934010152, 1},
    {-0.0797101449, -0.3578680203, 1},
    {-0.0724637681, -0.307106599, 1},
    {-0.1721014493, -0.2766497462, 1},
    {-0.2282608696, -0.3527918782, 1},
    {-0.2445652174, -0.2563451777, 1},
    {-0.3043478261, -0.2157360406, 1},
    {-0.3423913043, -0.2055837563, 1},
    {-0.4420289855, -0.4340101523, 1},
    {-0.4583333333, -0.4441624365, 1},
    {-0.4655797101, -0.4289340102, 1},
    {-0.4673913043, -0.3883248731, 1},
    {-0.4565217391, -0.2258883249, 1},
    {-0.4583333333, -0.1091370558, 1},
    {-0.4692028986, 0.0126903553, 1},
    {-0.4800724638, 0.0939086294, 1},
    {-0.5, 0.2055837563, 1}
};


const double mini = .3, maxi = .7, step = .01;

std::vector<double> xs;
std::vector<double> ys;
int i = 0;



Plant p1(Turtle(.0035, 20, -.5, -1, 1.5, .05), LSystem('X',{
    {'F',
        {"FF"}},
    {'X',
        {"F[+X]F[-X]+X"}}
}), 7, Color(43. / 255, 112. / 255, 46. / 255));

Plant p2(Turtle(.02, 20, .5, -1, .3, .1), LSystem('F',{
    {'F',
        {"FF-[-F+F+F]+[+F-F-F]"}}
}), 4, Color(43. / 255, 112. / 255, 46. / 255));


Plant p3(Turtle(.02, 20, 0, -1, 1, .1), LSystem('F',{
    {'F',
        {"F[+F]F[-F]F", "F[+F]F", "F[-F]F"}}
}), 5, Color(96. / 255, 140. / 255, 93. / 255));
Animal a1(fish1, mini, mini);
Animal a2(fish2, mini, mini);

void renderFunction()
{
    a1.setScaleX(xs[i]);
    a1.setScaleY(ys[i]);
    a2.setScaleX(xs[i]);
    a2.setScaleY(ys[i]);
    i++;
    i %= xs.size();

    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 1.0, 1.0);
    glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);

    p1.Draw();
    p2.Draw();
    p3.Draw();

    a1.Draw(.5, .5);
    a2.Draw(-.5, .5);
    glFlush();
}

void timer(int)
{
    glutPostRedisplay();
    glutTimerFunc(1000 / 30, timer, 0);
}

int main(int argc, char** argv)
{
    for (double x = mini; x < maxi; x += step * 15)
    {
        for (double y = mini; y < maxi; y += step)
        {
            xs.push_back(x);
            ys.push_back(y);
        }
    }

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(1200, 800);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("ALife");
    glutDisplayFunc(renderFunction);
    timer(0);
    glutMainLoop();

    return 0;
}
